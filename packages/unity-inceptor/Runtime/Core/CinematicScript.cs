using System;
using System.Collections.Generic;
using System.IO;
using InceptorEngine.Clips.Interfaces;
using Newtonsoft.Json.Linq;
using UnityEditor;
using UnityEngine;

namespace InceptorEngine
{
    /// <summary>
    /// A data structure holding information about a character in the cinematic.
    /// This is configured in the JSON script and used by the wizard.
    /// </summary>
    [Serializable]
    public struct CinematicScriptCharacterInfo
    {
        /// <summary>
        /// The name of the character.
        /// </summary>
        public string name;
        
        /// <summary>
        /// A description of the character's personality or role.
        /// </summary>
        public string description;
        
        /// <summary>
        /// The name of the model asset associated with this character.
        /// </summary>
        public string modelName;
        
        /// <summary>
        /// A direct reference to the character's prefab, assigned in the wizard.
        /// </summary>
        public GameObject modelPrefab;
    }

    /// <summary>
    /// A ScriptableObject that represents a complete cinematic narrative.
    /// It holds a list of all clips and characters involved in the scene.
    /// This asset is generated by the Inceptor Wizard from a JSON file.
    /// </summary>
    [CreateAssetMenu(fileName = "CinematicScript", menuName = "Cinematic Script", order = 0)]
    public class CinematicScript : ScriptableObject
    {
        /// <summary>
        /// The sequential list of clips that make up the cinematic.
        /// </summary>
        public List<Clip> clipList = new List<Clip>();

        /// <summary>
        /// The list of all unique characters appearing in the script.
        /// </summary>
        public List<CinematicScriptCharacterInfo> characters = new List<CinematicScriptCharacterInfo>();

    #if UNITY_EDITOR
        /// <summary>
        /// [Editor-Only] Orchestrates the process of reading a JSON file, parsing it,
        /// and writing the resulting assets to disk.
        /// </summary>
        /// <param name="jsonPath">The absolute file path to the JSON script.</param>
        /// <returns>A fully populated and saved CinematicScript asset, or null on failure.</returns>
        public static CinematicScript BuildScript(string jsonPath)
        {
            string nameOfScript = Path.GetFileNameWithoutExtension(jsonPath);
            string rawJsonString = File.ReadAllText(jsonPath);

            // Step 1: Parse the JSON into an in-memory object.
            CinematicScript parsedScript = CinematicScriptParser.Parse(rawJsonString);

            if (parsedScript == null)
            {
                // The parser encountered a critical error.
                return null;
            }

            // Step 2: Write the in-memory object and its children to disk.
            CinematicScriptWriter.WriteToDisk(parsedScript, nameOfScript);

            // Return the now-persistent asset.
            return parsedScript;
        }
    }
    #endif
}